[TOC]

# 第六章 请求到达web服务器，响应返回浏览器

## 6.1 服务器概览

### 6.1.1 客户端与服务器的区别

连接过程中，客户端发起连接操作，服务器是等待连接操作，应用程序调用socket库的程序组件不同。

服务器的程序可以同时和多台客户端计算机进行通信，这也是不同点

### 6.1.2 服务器程序的结构

服务器需要同时和多个客户端通信，服务器必须把握每一个客户端的操作状态，因此一般做法：每有一个客户端连接进来，就启动一个新的服务器程序，确保服务器程序和客户端是一对一的状态。

服务器程序分为两个模块，等待连接模块和负责与客户端通信的模块。

当服务器程序启动并读取配置文件完成初始化操作后，就会运行等待连接模块，这个模块会创建套接字，然后程序进入等待连接的暂停状态。接下来，客户端发起连接时程序会恢复运行并接受连接，然后启动客户端通信模块，并移交完成连接的套接字，接下来，客户端通信模块就会使用已连接的套接字与客户端通信，通信结束之后，这个程序就退出。

服务器操作系统具有多任务多线程功能，可以同时运行多个程序。

可以事先启动几个服务器程序，当客户端发起连接的时候，从空闲的模块中挑选一个出来将套接字移交给它来处理。

### 6.1.3 服务器端的套接字和接口号

从数据收发角度来看，发起连接的一方是苦户端，等待连接的一方是服务器。

客户端的数据收发需要下面四个阶段：

1. 创建套接字（创建套接字阶段）
2. 用管道连接服务器端的套接字（连接阶段）
3. 收发数据（收发阶段）
4. 断开管道并删除套接字（断开阶段）

服务器则需要一下阶段

1. 创建套接字
2. 将套接字设置为等待连接状态
3. 接受连接
4. 收发数据
5. 断开管道并删除套接字

协议栈调用socket创建套接字。

接下来调用bind将端口号写入套接字中，设置好端口号之后，协议栈会调用listen向套接字写入等待连接状态这一控制信息。套接字就会开始等待来自客户端的连接网络包。协议栈会调用accept来接受连接（在执行accept的时候，一般来说服务器都是处于等待包到达的状态，这时应用程序会暂停运行），一旦客户端的包到达，就会返回响应包并开始接受连接操作，接下来，协议栈会给等待连接的套接字复制一个副本，然后将连接对象等控制信息写入新的套接字中。accept结束之后，就进入了客户端通信模块，将连接好的套接字转交给客户端通信模块，由这个模块来负责执行与客户端之间的通信操作。

复制出一个新的套接字之后，原来那个处于等待连接状态的套接字会继续保持等待连接状态，再次调用accept的时候，可以再次执行接受操作。如果不创建新的副本，那么就没有套接字在等待连接了，这时如果有其他客户端发起连接就会遇到问题。所以协议栈采用了这个创建套接字副本的方法。

新创建的套接字副本必须和原套接字具有相同的端口号，所以确定某个端口号的时候，不仅使用服务器端套接字对应的端口号和IP地址，还同时使用客户端的端口号加上IP地址。

当有多个客户端进行连接的时候，它们之间的端口号是可以重复的，所以还要加上客户端的IP地址。

还有一个东西叫描述符，是在服务器端用来代替描述符的，因为在等待连接阶段，还没有创建连接的时候，四个信息是不完整的，此外使用一种信息比较简单，所以使用描述符来指代套接字。

## 6.2 服务器的接收操作

### 6.2.1 网卡将接收到的信号转换成数字信息

网卡的MAC模块将网络包从信号还原为数字信息，校验FCS并存入缓冲区。

网卡驱动会根据MAC头部判断协议类型，并将包交给相应的协议栈。

### 6.2.2 IP模块的接收操作

协议栈的IP模块会检查IP头部：

1. 判断是不是发给自己的
2. 判断有没有分片
3. 将包转交给TCP或者UDP模块（检查IP头部的协议号字段）

### 6.2.3 TCP模块如何处理连接包

TCP头部中SYN位为1，说明这是一个发起连接的包。TCP模块会执行连接操作，在此之前需要检查包的接收方端口号，并确认在该端口上有没有与接收方端口号相同且处于等待连接状态的套接字。如果指定端口号没有等待连接的套接字，则返回错误通知的包。

如果存在等待连接的套接字，就为这个套接字复制一个副本，并将发送方IP地址，端口号，序号初始值，窗口大小等必要参数写入这个套接字，同时分配用于发送缓冲区和接收缓冲区的内存空间，生成确认接收的ACK号，用于从服务器向客户端发送数据的序号初始值，表示缓冲区剩余容量的窗口大小，生成TCP头部，委托IP模块发送到客户端。

### 6.2.4 TCP模块如何处理数据包

1. 根据收到的包的发送方IP地址，发送方端口号，接收方端口号，接收方IP地址，找到相对应的套接字
2. 将数据块整合起来并保存在接收缓冲区中
3. 向客户端返回ACK

### 6.2.5 TCP模块的断开操作

TCP协议的规则中，断开操作可以由客户端或服务器任何一方发起，具体顺序是由应用层协议决定的。web中与HTTP协议版本有关，HTTP1.0中是服务器先发起断开操作。HTTP1.1是客户端先

服务器调用close，生成FIN位为1的包，客户端收到后返回一个ACK号，客户端再生成一个FIN为1的位，服务器返回一个ACK号。

断开操作完成时，套接字会在一段时间后被删除。

## 6.3 web服务器程序解释请求消息并作出响应

### 6.3.1 将请求的URI转换为实际的文件名

web服务器公开的目录其实并不是磁盘上实际目录，而是虚拟目录。URL中写的就是这个虚拟目录结构下的路径名。当读取文件的时候需要先查询虚拟目录与实际目录的对应关系，将URI转化为实际目录之后才能读取文件并返回数据。

有些web服务器程序还具有文件名改写功能，只要设置好改写的规则，当URL中的路径符合改写规则时，就可以将URI中的文件名改写成其他的文件名进行访问。（出于某些原因web服务器中的目录和文件名发生变化，又希望用户通过原来的网址进行访问的时候，这个功能很有用）。

### 6.3.2 运行CGI程序

收到请求消息之后，web服务器会进行下面的工作。web服务器会检查URI指定的文件名，看看这个文件是不是一个程序。

判断方法是在web服务器中事先设置好的，一般通过文件的扩展名来判断，例如将.cgi,.php等扩展名的文件设置为程序，也可以设置一个个存放程序的目录，将这个目录下的所有文件都作为程序来对待，此外还可以根据文件的属性来判断。

如果判断要访问的文件为程序，web服务器委托操作系统运行这个程序，然后从请求消息中取出数据交给运行的程序。如果方法为GET，则将URI后面的参数传递给程序；如果方法为POST，则将消息体中的数据传递给程序。

### 6.3.3 web服务器的访问控制

web服务器的基本工作方式就是根据请求消息的内容判断数据源，并从中获取数据返回给客户端，在执行这些操作之前，web服务器还可以检查事先设置的一些规则，并根据规则允许或禁止访问。这种根据规则判断是否允许访问的功能称为访问控制。

web服务器的访问规则控制以下三种：

1. 客户端IP地址
2. 客户端域名
3. 用户名和密码

当根据客户端域名设置规则，先根据客户端IP地址查询客户端域名，这需要用到DNS服务器，查询到之后，还需要再根据域名查询一遍IP地址，看能否对应，因为有一种在DNS服务器上注册假域名的攻击方式，所以需要双重检查。

通常的请求消息中不包含用户名和密码，因此无法验证用户名和密码，因此web服务器会向用户发送一条响应消息。浏览器收到这条响应消息之后，会弹出一个输入用户名和密码的窗口，用户输入用户名和密码之后，再次通过请求消息发送，web服务器比较判断是否允许访问。

### 6.3.4 返回响应消息

web服务器调用write组件，将响应消息交给协议栈。告诉协议栈要发送给谁，只需要通过套接字的描述符就可以。

协议栈会将数据拆分成多个网络包，然后加上头部发送出去，它们将经过交换机和路由器的转发，通过互联网最终到达客户端。

## 6.4 浏览器接收响应消息并显示内容

### 6.4.1 通过响应的数据类型判断其中的内容

浏览器是如何显示内容的？

根据响应消息的头部Content-Type头部字段来判断。

如：`Content-Type: text/html` 左边的部分为主类型，表示数据的大分类；右边的子类型，表示具体的数据类型。

当数据类型为文本的时候，还需要判断编码方式，这时候需要用charset附加表示文本编码方式的信息。

还需要检查`Content-Encoding`头部字段，如果消息中存放的内容是通过压缩或编码技术对原始数据进行转换得到的，那么`Content-Encodeing`的值就表示具体的转换方式。

有时候，还需要结合其他一些信息来综合判断数据类型，例如请求文件的扩展名，数据内容的格式。

### 6.4.2 浏览器显示网页内容

对于HTML文档，纯文本，图片这些基本数据类型，浏览器自身具有 显示这些内容的功能，因此由浏览器自身负责显示。

网页中还可以嵌入图片等数据，HTML文档和图片是分开存在不同的文件中的，读取文档的时候一旦遇到标签，浏览器就会向服务器请求其中的图片文件，这个请求过程和请求HTML文档过程是一样的。

web服务器还可能返回其他一些类型的数据，如文字处理，幻灯片等应用程序的数据，这些无法由浏览器自行显示，会调用相应的程序。

浏览器的显示操作就完成了。